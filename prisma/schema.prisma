generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(cuid())
  email            String       @unique
  username         String       @unique
  password         String
  role             String       @default("user")
  membershipType   String       @default("free")
  membershipExpiry DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  avatar           String?
  bio              String?
  successRate      Float?       @default(0)
  articles         Article[]
  comments         Comment[]
  following        Follows[]    @relation("Follower")
  followers        Follows[]    @relation("Following")
  predictions      Prediction[]
}

model Prediction {
  id         String    @id @default(cuid())
  title      String
  content    String
  matchId    String
  prediction String
  odds       Float
  status     String    @default("pending")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  authorId   String
  comments   Comment[]
  author     User      @relation(fields: [authorId], references: [id])
  match      Match     @relation(fields: [matchId], references: [id])
}

model Match {
  id          String       @id @default(cuid())
  homeTeam    String
  awayTeam    String
  league      String
  date        DateTime
  predictions Prediction[]
  result      Result?
}

model Result {
  id        String @id @default(cuid())
  matchId   String @unique
  homeScore Int
  awayScore Int
  status    String
  match     Match  @relation(fields: [matchId], references: [id])
}

model Article {
  id        String    @id @default(cuid())
  title     String
  content   String
  image     String?
  authorId  String
  category  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Int       @default(0)
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  following   User     @relation("Following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model Comment {
  id           String      @id @default(cuid())
  content      String
  articleId    String
  predictionId String?
  authorId     String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  article      Article     @relation(fields: [articleId], references: [id])
  author       User        @relation(fields: [authorId], references: [id])
  prediction   Prediction? @relation(fields: [predictionId], references: [id])
}
